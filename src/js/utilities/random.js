
/**
 * Returns a random key from an array.
 * 
 * @function	getRandomKeyFromArray
 * @param 		{Array} array 
 * @returns		{any}
 */
export const getRandomKeyFromArray = array => array[Math.floor(Math.random() * array.length)];

/**
 * Returns the value given without any calculations
 * 
 * @function	linearCurve
 * @param 		{number} value 
 * @param 		{number} offset 
 * @returns		{number}
 */
export const linearCurve = (value, offset = 0) => value + offset;

/**
 * Doubles the value.
 * 
 * @function	doubleCurve
 * @param 		{number} value 
 * @param 		{number} offset 
 * @returns		{number}
 */
export const doubleCurve = (value, offset = 0) => (value * 2) + offset;

/**
 * Exponentially increases the value.
 * 
 * @function	expoCurve
 * @param 		{number} value 
 * @param 		{number} offset 
 * @returns		{number}
 */
export const expoCurve = (value, offset = 0) => (value ** value) + offset;

/**
 * Generates an array with with a probability factor in each key.
 * Each index value in the array is put through the curveCallback
 * which will return a new value based on a give formula. This curve
 * is essentially your the function that controls the probability.
 * 
 * @function	generateProbabilityValues
 * @param 		{number} start Start number.
 * @param 		{number} end End number.
 * @param 		{number} [step=1] Step the number increases with.
 * @param 		{function} [curve=linearCurve] The curve that returns the probability.
 * @returns		{array}
 */
export const generateProbabilityValues = (start, end, step = 1, curveCallback = doubleCurve) => {
	const probabiltyValues = [];
	for (let i = start; i < end; i += step) {
		const value = curveCallback(i);
		probabiltyValues.push(value);
	}
	return probabiltyValues;
};

/**
 * Generates an array with numbers in them. The occurence of a single number 
 * in the array is based on the probability value generated by the generateProbabilityValues function.
 * 
 * @function	generateRandomNumbersByProbability
 * @uses		generateProbabilityValues
 * @returns		{array}
 */
export const generateRandomNumbersByProbability = () => {
	const randomNumbers = [];
	const probabiltyValues = generateProbabilityValues(0, 10);
	probabiltyValues.forEach(value => {
		for (let i = 0; i < value; i++) {
			randomNumbers.push(value);
		}
	});
	return randomNumbers;
};

/**
 * Absraction function that generates a random numbers array based on probabilities and
 * returns a random key from the generated array.
 * 
 * @function	getLoadedRandomNumber
 * @uses		generateRandomNumbersByProbability
 * @uses		getRandomKeyFromArray
 * @returns		{number}
 */
export const getLoadedRandomNumber = () => getRandomKeyFromArray(generateRandomNumbersByProbability());